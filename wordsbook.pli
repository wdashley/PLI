/******************************************************************************
 * File:       wordsbook.pli
 * Author:     W. David Ashley
 * Date:       2024-10-26
 * Copyright:  Copyright Â© 2024 W. David Ashley
 *             This source file is goverened by the The Open Software License
 *             3.0 which is included with the source code distribution.
 * Notes:      A set of fuunctions for creating and maintaining a dictionary
 *             as well as a parser for substituting text from the wordsbook
 *             into a text string and returning the new text string to the
 *             caller.
 * Updates:    2024-10-26 WDA Initial release.
 *
 ******************************************************************************/


wordsbook: package exports(*);

dcl 01 wordsbook(100) static,
    05 varname char(32) var,
    05 varvalue char(100) var;
dcl wkbk_entries fixed bin(31) static init(0);


/******************************************************************************
 * Function:   add_word
 * Notes:      Add a varname and its value to the wordsbook.
 ******************************************************************************/

add_word: proc(new_varname, new_varvalue);

dcl new_varname char(32) var;
dcl new_varvalue char(100) var;

if wkbk_entries > dim(wordsbook, 1) then return(-1);
wkbk_entries = wkbk_entries + 1;
wordsbook(wkbk_entries).varname = new_varname;
wordsbook(wkbk_entries).varvalue = new_varvalue;
return(0);

end add_word;


/******************************************************************************
 * Function:   modify_word
 * Notes:      Modify the value of an existing varname in the wordsbook.
 ******************************************************************************/

modify_word: proc(varname, new_varvalue);

dcl varname char(32) var;
dcl new_varvalue char(100) var;
dcl i fixed bin(31);

do i = 1 to wkbk_entries;
    if varname = wordsbook(i).varname then do;
        wordsbook(i).varvalue = new_varvalue;
        return(0);
        end;
    end;
/* varname was not found, so add the entry */
return(add_word(varname, new_varvalue));

end modify_word;


/******************************************************************************
 * Function:   delete_word
 * Notes:      Remove a varname and its value frome the wordsbook.
 ******************************************************************************/

delete_word: proc(varname);

dcl varname char(32) var;
dcl (i, j) fixed bin(31);

do i = 1 to wkbk_entries;
    if varname = wordsbook(i).varname then do;
        /* remove the varname entry by closing up the array */
        do j = i + 1 to wkbk_entries;
            wordsbook(i).varname = wordsbook(j).varname;
            wordsbook(i).varvalue = wordsbook(j).varvalue;
            i = i + 1;
           end;
        wkbk_entries = wkbk_entries - 1;
        return(0);
        end;
    end;
return(-1);

end delete_word;


/******************************************************************************
 * Function:   return_value
 * Notes:      Return the varvalue of a varname entry.
 ******************************************************************************/

return_value: proc(varname);

dcl varname char(32) var;
dcl i fixed bin(31);

do i = 1 to wkbk_entries;
    if varname = wordsbook(i).varname then return(wordsbook(i).varvalue);
    end;
return('');

end return_value;


/******************************************************************************
 * Function:   parse_text
 * Notes:      Parse input text and substitute values in the text from the
 *             wordsbook entries.
 ******************************************************************************/

parse_text: proc(itext) returns(char(8192) var);

dcl itext char(8192) var;
dcl otext char(8192) var;
dcl (i, j, k) fixed bin(31);
dcl start_delim char(1) static init('{');
dcl end_delim char(1) static init('}');
dcl varname char(32) var;
dcl search builtin;
dcl sysprint output;

otext = itext;
i = search(otext, start_delim);
do while(i > 0);
    j = search(otext, end_delim);
    varname = substr(otext, i + 1, j - i - 1);
    do k = 1 to wkbk_entries;
        if varname = wordsbook(k).varname then do;
            otext = substr(otext, 1, i - 1) || wordsbook(k).varvalue || substr(otext, j + 1);
            leave;
            end;
        end;
    i = search(otext, start_delim);
    end;
return(otext);

end parse_text;

end wordsbook;

